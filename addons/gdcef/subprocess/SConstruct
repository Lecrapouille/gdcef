#!python
###############################################################################
## MIT License
##
## Copyright (c) 2022 Alain Duron <duron.alain@gmail.com>
## Copyright (c) 2022 Quentin Quadrat <lecrapouille@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
###############################################################################

import os

# We let SCons build its default ENV as it includes OS-specific things which we don't
# want to have to pull in manually.
# Then we prepend PATH to make it take precedence, while preserving SCons' own entries.
custom_tools = ["default"]
env = Environment(tools=custom_tools)
env.PrependENVPath("PATH", os.getenv("PATH"))
env.PrependENVPath("PKG_CONFIG_PATH", os.getenv("PKG_CONFIG_PATH"))
if "TERM" in os.environ:  # Used for colored output.
    env["ENV"]["TERM"] = os.environ["TERM"]
opts = Variables([], ARGUMENTS)

# Define our options
platforms = ['windows', 'x11', 'linux', 'linuxbsd', 'macos', 'osx']
archis = ['x86_64', 'arm64']

# Define our options
opts.Add(EnumVariable('target', 'Compilation target', '', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', 'Compilation platform', '', platforms + ['']))
opts.Add(EnumVariable('arch', 'Platform architecture', 'x86_64', ['x86_64', 'arm64']))
opts.Add(BoolVariable('use_llvm', 'Use the LLVM / Clang compiler', 'no'))
opts.Add(PathVariable('api_path', 'Godot C++ API', ''))
opts.Add(PathVariable('build_path', 'Build path', ''))

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments.
# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags
if env['use_llvm'] or env['platform'] == 'osx':
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

# Process platform arguments. Here we use the same names as GDNative.
platform = env['platform']
if platform == 'macos':
    platform = 'osx'
elif platform in ('x11', 'linuxbsd'):
    platform = 'linux'
elif platform == 'bsd':
    platform = 'freebsd'
if platform == '':
    print('No valid target platform selected.')
    quit()

# X86 or ARM
archi = env['arch']

# Check if Godot exists
godot_api_path = env['api_path']
if not os.path.isdir(godot_api_path):
    print('The Godot path ' + godot_api_path + ' is invalid.')
    quit();

# Compile either in release or debug mode
compile_mode = env['target']
if compile_mode == 'd':
    compile_mode = 'debug'
elif compile_mode == 'r':
    compile_mode = 'release'

# Compile CEF either in 'Release' or 'Debug' mode
cef_compile_mode = compile_mode.capitalize()

# The godot library we want to create
target_path = env['build_path']
target_binary = 'gdcefSubProcess'

# Platform specific compilation
if platform == 'osx':
    env.Append(CXXFLAGS=['--std=c++17'])
    env.Append(LINKFLAGS=['-arch', archi])
    env.Append(CCFLAGS=['-arch', archi])
    if compile_mode == 'debug':
        env.Append(CCFLAGS=['-g', '-O2'])
    else:
        env.Append(CCFLAGS=['-g', '-O3'])
    env.Append(CCFLAGS=['-fPIC'])
    env.Append(CXXFLAGS=['-DCEF_USE_SANDBOX', '-DNDEBUG',
                         '-DWRAPPING_CEF_SHARED', '-D__STDC_CONSTANT_MACROS',
                         '-D__STDC_FORMAT_MACROS'])

elif platform == 'linux':
    env.Append(CXXFLAGS=['--std=c++17'])
    if compile_mode == 'debug':
        env.Append(CCFLAGS=['-g3', '-Og'])
    else:
        env.Append(CCFLAGS=['-g', '-O3'])
    env.Append(CCFLAGS=['-fPIC'])
    env.Append(CXXFLAGS=['-DCEF_USE_SANDBOX', '-DNDEBUG', '-D_FILE_OFFSET_BITS=64',
                         '-D__STDC_CONSTANT_MACROS', '-D__STDC_FORMAT_MACROS'])
    # Add compilation flags
    env.Append(CCFLAGS=['-Wall', '-Wextra'])

    # Remove some important compilation flags because of external libs
    # does not compile with correct flags
    env.Append(CCFLAGS=['-Wno-unused-parameter', '-Wno-parentheses'])

elif platform == 'windows':
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV=os.environ)

    env.Append(CPPDEFINES=['WIN32', '_WIN32', '_WINDOWS', '_CRT_SECURE_NO_WARNINGS'])
    env.Append(CCFLAGS=['-W3', '-GR'])
    env.Append(CXXFLAGS='/std:c++17')
    if compile_mode == 'debug':
        env.Append(CPPDEFINES=['_DEBUG'])
        env.Append(CCFLAGS=['-EHsc', '-MDd', '-ZI'])
        env.Append(LINKFLAGS=['-DEBUG'])
    else:
        env.Append(CPPDEFINES=['NDEBUG'])
        env.Append(CCFLAGS=['-O2', '-EHsc', '-MD'])

# Unix compilation flags
if platform == 'linux' or platform == 'osx':
    # gcc/clang compilation flags
    env.Append(CXXFLAGS=['-Wall', '-Wextra', '-Wuninitialized', '-Wundef',
                         '-Wunused', '-Wunused-result', '-Wunused-parameter',
                         '-Wtype-limits', '-Wcast-align', '-Wcast-qual',
                         '-Wconversion', '-Wfloat-equal', '-Wpointer-arith',
                         '-Wswitch-enum', '-Wpacked', '-Wold-style-cast',
                         '-Wdeprecated', '-Wvariadic-macros', '-Wvla',
                         '-Wsign-conversion'])

    # clang specific flags
    if env['use_llvm']:
        env.Append(CXXFLAGS=['-Wused-but-marked-unused', '-Wzero-length-array',
                             '-Wunused-member-function', '-Wvector-conversion',
                             '-Wunused-getter-return-value', '-Wthread-safety',
                             '-Wunneeded-member-function', '-Wshadow-all',
                             '-Wunused-exception-parameter',
                             '-Wunneeded-internal-declaration',
                             '-Wunreachable-code-aggressive',
                             '-Wsuper-class-method-mismatch',
                             '-Werror=implicit-function-declaration',
                             '-Wtautological-compare'])

# Pathes of Godot header files
env.Append(CPPPATH=['.',
                    godot_api_path + '/godot-headers',
                    godot_api_path + '/include',
                    godot_api_path + '/include/core',
                    godot_api_path + '/include/gen'])

# Godot library that is linked against our library
libgodot = 'libgodot-cpp.' + platform + '.template_' + compile_mode + '.' + archi
env.Append(LIBS=[libgodot], LIBPATH=[godot_api_path + '/bin'])

# Pathes of CEF header files
cef_folder = '../thirdparty/cef_binary'
cef_include_folder = cef_folder + '/include'
env.Append(CPPPATH = [cef_folder,
                      cef_include_folder,
                      cef_include_folder + '/base',
                      cef_include_folder + '/base/internal',
                      cef_include_folder + '/capi',
                      cef_include_folder + '/capi/views',
                      cef_include_folder + '/internal',
                      cef_include_folder + '/views',
                      cef_include_folder + '/wrapper'])

# CEF libraries that are linked against our application
libcef = 'libcef' if platform != 'osx' else 'libcef_sandbox'
env.Append(LIBS = [libcef, 'libcef_dll_wrapper'],
           LIBPATH = [cef_folder + '/' + cef_compile_mode,
                      cef_folder + '/build',
                      cef_folder + '/build/libcef_dll_wrapper',
                      cef_folder + '/libcef_dll_wrapper/' + cef_compile_mode])

# Pathes header files of our module
env.Append(CPPPATH=['src/'])

# Compile the application
sources = Glob('src/*.cpp')
application = env.Program(target=target_path + '/' + target_binary, source=sources)
Default(application)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
